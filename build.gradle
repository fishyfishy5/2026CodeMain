plugins {
    id "java"
    id "edu.wpi.first.GradleRIO" version "2025.3.2"
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

def ROBOT_MAIN_CLASS = "frc.robot.Main"

// -------------------- Targets & Deploy --------------------
deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                frcJava(getArtifactTypeClass('FRCJavaArtifact'))
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                    deleteOldFiles = false
                }
            }
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcJava

// -------------------- Dependencies --------------------
repositories {
    mavenCentral()
    maven { url 'https://frcmaven.wpi.edu/artifactory/release/' }
    maven { url 'https://frcmaven.wpi.edu/artifactory/vendor-mvn-release/' }
    maven { url 'https://frcmaven.wpi.edu/artifactory/littletonrobotics-mvn-release/' }
}

dependencies {
    // WPILib dependencies
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()
    annotationProcessor wpi.java.deps.wpilibAnnotations()

    // JUnit 5
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // JNI for WPILib
    roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
    roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)
    roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
    roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)

    // Simulation
    simulationDebug wpi.sim.enableDebug()
    simulationRelease wpi.sim.enableRelease()

    // ---------------- AdvantageKit ----------------
    def akitJson = new groovy.json.JsonSlurper().parseText(
        new File(projectDir, "vendordeps/AdvantageKit.json").text
    )
    implementation "org.littletonrobotics.akit:akit-java:$akitJson.version"
    annotationProcessor "org.littletonrobotics.akit:akit-autolog:$akitJson.version"
}
// -------------------- Test --------------------
test {
    useJUnitPlatform()
    systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
}

// -------------------- Simulation --------------------
wpi.sim.addGui().defaultEnabled = true
wpi.sim.addDriverstation()

// -------------------- Jar Configuration --------------------
jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    from sourceSets.main.allSource
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Deploy artifact setup
deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)

// Always inline string concatenation
tasks.withType(JavaCompile) {
    options.compilerArgs.add '-XDstringConcat=inline'
}

task(replayWatch, type: JavaExec) {
    mainClass = "org.littletonrobotics.akit.ReplayWatch"
    classpath = sourceSets.main.runtimeClasspath
}

